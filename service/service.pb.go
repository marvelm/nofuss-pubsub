// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PutRequest struct {
	Topic                []byte   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutReply struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutReply) Reset()         { *m = PutReply{} }
func (m *PutReply) String() string { return proto.CompactTextString(m) }
func (*PutReply) ProtoMessage()    {}
func (*PutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *PutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutReply.Unmarshal(m, b)
}
func (m *PutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutReply.Marshal(b, m, deterministic)
}
func (m *PutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutReply.Merge(m, src)
}
func (m *PutReply) XXX_Size() int {
	return xxx_messageInfo_PutReply.Size(m)
}
func (m *PutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PutReply.DiscardUnknown(m)
}

var xxx_messageInfo_PutReply proto.InternalMessageInfo

func (m *PutReply) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SubscribeRequest struct {
	Topic                []byte   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	StartingOffset       uint64   `protobuf:"varint,2,opt,name=starting_offset,json=startingOffset,proto3" json:"starting_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *SubscribeRequest) GetStartingOffset() uint64 {
	if m != nil {
		return m.StartingOffset
	}
	return 0
}

type SubscribeReply struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Offset               uint64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReply) Reset()         { *m = SubscribeReply{} }
func (m *SubscribeReply) String() string { return proto.CompactTextString(m) }
func (*SubscribeReply) ProtoMessage()    {}
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *SubscribeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReply.Unmarshal(m, b)
}
func (m *SubscribeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReply.Marshal(b, m, deterministic)
}
func (m *SubscribeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReply.Merge(m, src)
}
func (m *SubscribeReply) XXX_Size() int {
	return xxx_messageInfo_SubscribeReply.Size(m)
}
func (m *SubscribeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReply proto.InternalMessageInfo

func (m *SubscribeReply) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SubscribeReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubscribeReply) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*PutRequest)(nil), "service.PutRequest")
	proto.RegisterType((*PutReply)(nil), "service.PutReply")
	proto.RegisterType((*SubscribeRequest)(nil), "service.SubscribeRequest")
	proto.RegisterType((*SubscribeReply)(nil), "service.SubscribeReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4e, 0xc3, 0x30,
	0x0c, 0x87, 0x49, 0x3b, 0xc6, 0xb0, 0x60, 0x0c, 0x83, 0xa0, 0xec, 0x84, 0x72, 0x81, 0xd3, 0x40,
	0xf0, 0x08, 0x5c, 0x90, 0x40, 0x50, 0xca, 0x03, 0xa0, 0xa6, 0x64, 0xa8, 0x62, 0x22, 0x21, 0x71,
	0x90, 0x7a, 0xe3, 0xd1, 0xd1, 0xbc, 0x6c, 0x2d, 0x7f, 0xc4, 0xcd, 0xfe, 0x25, 0xfa, 0xfc, 0xc5,
	0x81, 0x6d, 0xaf, 0xdd, 0x47, 0x5d, 0xe9, 0x89, 0x75, 0x86, 0x0c, 0x6e, 0xc4, 0x56, 0x5e, 0x03,
	0xe4, 0x81, 0x0a, 0xfd, 0x1e, 0xb4, 0x27, 0xdc, 0x87, 0x75, 0x32, 0xb6, 0xae, 0x32, 0x71, 0x2c,
	0x4e, 0xb7, 0x8a, 0x45, 0x83, 0x23, 0x48, 0x5f, 0x75, 0x93, 0x25, 0x9c, 0xcd, 0x4b, 0x44, 0xe8,
	0x3d, 0x97, 0x54, 0x66, 0x29, 0x47, 0x5c, 0x4b, 0x09, 0x03, 0x26, 0xd9, 0x59, 0x83, 0x07, 0xd0,
	0x37, 0xd3, 0xa9, 0xd7, 0xc4, 0xa0, 0x5e, 0x11, 0x3b, 0xf9, 0x00, 0xa3, 0xc7, 0xa0, 0x7c, 0xe5,
	0x6a, 0xa5, 0xff, 0x9f, 0x79, 0x02, 0x3b, 0x9e, 0x4a, 0x47, 0xf5, 0xdb, 0xcb, 0x53, 0x44, 0x25,
	0x8c, 0x1a, 0x2e, 0xe3, 0xfb, 0x05, 0xf2, 0x0e, 0x86, 0x1d, 0xe4, 0x7c, 0x78, 0xd4, 0x15, 0xbf,
	0x75, 0x93, 0x56, 0xb7, 0xa3, 0x98, 0x76, 0x15, 0x2f, 0x3e, 0x05, 0x0c, 0x6e, 0x6f, 0xf2, 0xa0,
	0x7c, 0x50, 0x78, 0x06, 0x69, 0x1e, 0x08, 0xf7, 0x26, 0xcb, 0xed, 0xb5, 0xbb, 0x1a, 0xef, 0x7e,
	0x0f, 0xed, 0xac, 0x91, 0x6b, 0x78, 0x05, 0x9b, 0x2b, 0x1b, 0x3c, 0x5a, 0xdd, 0xf8, 0xf9, 0xe8,
	0xf1, 0xe1, 0x5f, 0x47, 0x8c, 0x38, 0x17, 0xaa, 0xcf, 0x7f, 0x74, 0xf9, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x86, 0xa6, 0xda, 0xb4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LKPubsubClient is the client API for LKPubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LKPubsubClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LKPubsub_SubscribeClient, error)
}

type lKPubsubClient struct {
	cc *grpc.ClientConn
}

func NewLKPubsubClient(cc *grpc.ClientConn) LKPubsubClient {
	return &lKPubsubClient{cc}
}

func (c *lKPubsubClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, "/service.LKPubsub/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lKPubsubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LKPubsub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LKPubsub_serviceDesc.Streams[0], "/service.LKPubsub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &lKPubsubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LKPubsub_SubscribeClient interface {
	Recv() (*SubscribeReply, error)
	grpc.ClientStream
}

type lKPubsubSubscribeClient struct {
	grpc.ClientStream
}

func (x *lKPubsubSubscribeClient) Recv() (*SubscribeReply, error) {
	m := new(SubscribeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LKPubsubServer is the server API for LKPubsub service.
type LKPubsubServer interface {
	Put(context.Context, *PutRequest) (*PutReply, error)
	Subscribe(*SubscribeRequest, LKPubsub_SubscribeServer) error
}

// UnimplementedLKPubsubServer can be embedded to have forward compatible implementations.
type UnimplementedLKPubsubServer struct {
}

func (*UnimplementedLKPubsubServer) Put(ctx context.Context, req *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedLKPubsubServer) Subscribe(req *SubscribeRequest, srv LKPubsub_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterLKPubsubServer(s *grpc.Server, srv LKPubsubServer) {
	s.RegisterService(&_LKPubsub_serviceDesc, srv)
}

func _LKPubsub_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LKPubsubServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LKPubsub/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LKPubsubServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LKPubsub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LKPubsubServer).Subscribe(m, &lKPubsubSubscribeServer{stream})
}

type LKPubsub_SubscribeServer interface {
	Send(*SubscribeReply) error
	grpc.ServerStream
}

type lKPubsubSubscribeServer struct {
	grpc.ServerStream
}

func (x *lKPubsubSubscribeServer) Send(m *SubscribeReply) error {
	return x.ServerStream.SendMsg(m)
}

var _LKPubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.LKPubsub",
	HandlerType: (*LKPubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _LKPubsub_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _LKPubsub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
